use crate::{typecheck::ExpressionType, DeclarationContext};

use super::{HirModule, HirNode, HirNodeValue};

pub fn auto_numeric_cast(module: &mut HirModule, declarations: &DeclarationContext) {
    module.visit_mut(|node| {
        node.walk_expected_types_for_children_mut(declarations, |ty, child| {
            let ExpressionType::Primitive(expected_ty) = ty else {
                return;
            };
            let ExpressionType::Primitive(child_ty) = &child.ty else {
                return;
            };

            if expected_ty != child_ty {
                let ty = ExpressionType::Primitive(*expected_ty);
                let child_ty = *child_ty;
                let mut temp = HirNode::dummy();
                std::mem::swap(&mut temp, child);

                *child = HirNode::autogenerated(
                    HirNodeValue::NumericCast {
                        value: Box::new(temp),
                        from: child_ty,
                        to: *expected_ty,
                    },
                    ty,
                );
            }
        });
    });
}
