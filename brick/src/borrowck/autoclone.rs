use std::collections::HashSet;

use crate::{
    declaration_context::IntrinsicFunction,
    hir::HirNode,
    id::NodeID,
    typecheck::{CollectionType, PointerKind},
    ExpressionType, HirNodeValue,
};

pub fn insert_autoclones(root: &mut HirNode, autoclones: &HashSet<NodeID>) {
    root.visit_mut(|child| {
        if !autoclones.contains(&child.id) {
            return;
        }
        match child.ty {
            ExpressionType::Collection(CollectionType::ReferenceCounter(_)) => {
                *child = HirNode::autogenerated(
                    HirNodeValue::IntrinsicCall(
                        IntrinsicFunction::RcClone,
                        vec![HirNode::autogenerated(
                            HirNodeValue::TakeShared(Box::new(std::mem::take(child))),
                            ExpressionType::Pointer(
                                PointerKind::Shared,
                                Box::new(child.ty.clone()),
                            ),
                        )],
                    ),
                    child.ty.clone(),
                );
            }
            _ => unimplemented!("only RCs can currently autoclone"),
        }
    })
}
