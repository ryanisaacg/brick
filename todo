parallel to "progress":
- specify variable types
- real type inference
- array bounds checking
- basic extern types
- constant evaluation
- namespacing
- symbols
- better type checking for struct fields?
- parallel parsing
- module support
- pretty compiler diagnostics
- string support

data structures:
- the ability to heap allocate values
- sum types
- parametrics polymorphism

closures (blocked by data structures):
- nested function declarations
- create the capture environment
- figure out how to make runtime function calls

source debugging:
- actually generate a line program that represents the source
- generate info for variables
- generate function preludes and epilogues
- generate info for computations

number crunching:
- the rest of the math operators
- the rest of the comparison operators
- += style assignment operators
- integer demotion
- integer -> float promotion
- float -> int casting
- specify literal types

returns / stack management:
- blocks returning values
- handle disposing of values from functions that aren't used (e.g. Rust ';' statements)
- else statements
- check & deref / promote trailing return values, rather than just return statements

stuff to learn:
- pattern matching
- borrow-checking
- optimizations?

