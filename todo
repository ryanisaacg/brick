import support:
- allow imports to have nested paths
- allow imports to include a list of things, with an optional catch-all

namespaces:
- do em

arithmetic:
- add type level support for f64 and i64
- automatically promote integers to equivalent floats

strings:
- string and character literals in the parser
- string types
- string manipulation

semantic analysis:
- handle return, break statements in CFG parsing
- attach types to expressions, ensure they match properly

anonymous types:
- anonymous struct
- anonymous union

unions:
- are unions the right choice?? not 100% sure
- rename to enum?
- union lvalues are special - can only be assigned to
- unions can extend unions (refer to fields with nested access?)
- unions can have empty variants
- match statement (destructure unions, return value if exhaustive)

null:
- basic null flow analysis - maybe a special operation to de-null stuff
- ?. operator
- ?? operator

errors:
- functions can define `throws`
- throw operator creates and returns an error
- try operator returns an error if one exists
- functions may optionally define a union that they throw, and all `throw`s and `try`s in the function must conform to that union
- allow discriminating on errors with a try/catch type construct or something similar for non-throws functions

extern:
- extern functions are unsafe
- externs can only do C FFI stuff, for ease of wasm backend

unsafe:
- functions can be declared unsafe
- you can have unsafe blocks (or statements?)
- you can only call unsafe functions from within unsafe blocks

collections:
- index operator
- array literals typechecking
- dicts:
    - declaration syntax
    - typechecking

interpreter:
- reference support
- array support
- union support
- extern support

