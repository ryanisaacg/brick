import support:
- allow imports to have nested paths (sugar for recursively expanding?)
- allow imports to include a list of things, with an optional catch-all

modules:
- modules can be indexed in a type expression context
- modules can be indexed in a struct / variant literal context
- modules can be declared explicitly

returns:
- typecheck returns
- allow void returns

interfaces:
- interfaces exist and can be declared with associated functions
- structs can have associated functions
- structs can be converted to interfaces
- unions can be converted to interfaces
- modules can be converted to interfaces

arithmetic:
- automatically promote integers to equivalent floats

strings:
- escape sequences
- string manipulation
- interpolation literals
- multiline literals

semantic analysis:
- handle return, break statements in CFG parsing

anonymous types:
- anonymous struct
- anonymous union
- anonymous module
- anonymous interface

unions:
- are unions the right choice?? not 100% sure
- rename to enum? variant?
- union lvalues are special - can only be assigned to
- unions can extend unions (refer to fields with nested access?)
- unions can have empty variants
- match statement (destructure unions, return value if exhaustive)

null:
- basic null flow analysis - maybe a special operation to de-null stuff
- ?. operator
- ?? operator
- ! operator, which throws if the value is an error

errors:
- functions can define `throws`
- throw operator creates and returns an error
- try operator returns an error if one exists
- functions may optionally define a union that they throw, and all `throw`s and `try`s in the function must conform to that union
- allow discriminating on errors with a try/catch type construct or something similar for non-throws functions

borrow checker:
- enforce uniqueness of unique borrows
- can't use original binding when borrowed
- can't store borrows in types, or return them

coroutines:
- decide on some coroutine facility
- coroutines hold parameter borrows for their lifetime

generic programming:
- functions can take type parameters and typecheck properly
- types can be parameterized
- structs and unions can have associated functions
- there are interfaces which can require specific associated functions
- structs and unions can be passed in place of an interface
- interfaces can constrain generic parameters

extern:
- extern functions are unsafe
- externs can only do C FFI stuff, for ease of wasm backend

unsafe:
- functions can be declared unsafe
- you can have unsafe blocks (or statements?)
- you can only call unsafe functions from within unsafe blocks

collections:
- index operator
- array literals typechecking
- dicts:
    - dict type syntax
    - typechecking
    - interpreter

interpreter:
- reference support
- array support
- union support

units of measure:
- design some system to separate units of measure into various domains (e.g. a "screen pixel" different from a "logical pixel")

