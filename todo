borrow checker and lifetimes:
- clone support
- can't dereference pointers to Move types
- drop:
    - drop dicts
    - drop strings (may require string buffer vs string view types?)
    - drop nullables
- forbid user from calling destructors directly
- path support:
    - allow disjoint borrows of collection indices
    - allow reassignment of affine fields (currently they can't generate drops)

refactors:
- do all HirNodes need a ty? I think prrrrrobably not?

collections:
- tuples
- arrays:
    - allow empty arrays to typecheck (requires generic type syntax)
- dicts:
    - use a hash table
    - take references as keys, not the direct key type
    - allow empty dicts to type check (requires generic type syntax)
    - should set syntax auto-insert if necessary?
- rc's:
    - can take RC'ed references to collections? maybe even RC'ed subreferences to user-defined collections?
    - can get a ref from within an RC
    - atomic decrement?
- cells:
    - mark as !Sync or equivalent (or maybe just cut and replace with rwlock?)
    - (requires monomorphization) don't take a mutable parameter to get(), return an actual value
- rwlock
- slices
- automatically convert types when assigning collections?

wasm backend:
- handle coroutines
- figure out and fix issue with dictionaries
- bigger-than-word types should be returned via allocating on the stack and then writing to them via pointer
- explicitly handle stack overflows
- correctly arrange stack, data, and heap segments of memory

diagnostics:
- parsing recovery during errors
- "unknown type" placeholder for better error reporting
- "u32" used as type results in strange errors
- output errors in a custom format, not just as a printout of the error implementation

packages:
- packages can declare dependencies on one another
- packages can be imported
- packages can include a WASM blob
- investigate: wasm-bindgen and dylib with wasm blob

modules:
- `self` module is always available, contains all contents of package
- struct literals can contain module traversal
- modules can be indexed in a type expression context
- modules can be indexed in a struct / variant literal context
- modules can be declared explicitly

top-level statements:
- disallow top-level return
- decide what happens when more than one file in a package defines top-level statements
- decide what happens when a dependent package has top-level statements

interfaces:
- fundamental rethink (*must* be behind a pointer of some kind)
- self parameters for interfaces can only be passed by reference (otherwise linear IR doesn't work)
    - when making the method -> function conversion, automatically take a reference if it's required
    - mandate by-reference parameters for interfaces
- modules can be converted to interfaces:
    - produce and consume a nullpointer for the vtable call? (might mean we need to generate shim functions)
- interfaces can be structurally converted between each other:
    - in typechecking
    - in the IR
    - in the interpreter
- interface conversion:
    - checks return statements
    - checks implicit returns due to the end of blocks
    - check assignments
- interfaces are supported in the interpreter:
    - mutable interfaces (significant borrowck implications)

type validation:
- prevent references being stored in collections

interface adapters:
- allow an interface to define an impl for itself on foreign types, limited version of Rust's traits

build system:
- cargo-like "build" command that automatically passes source files to the compiler
- packages have a defined compiled format
- packages can depend on other packages

coroutines / generators / async:
- insert generator functions into declaration context
- stackless coroutines
    - alloc the generator to match its proper size
- support arguments to coroutines
    - either ban references from coroutine args or note that they're borrowed as long as the generator lives
    - copy arguments into the generator's initial state
- generators on associated functions
- non-infinite generators (e.g. generators should return Next(value) | Exhausted)
- error guardrails:
    - require coroutines to return generators
    - prevent calling coroutine through immutable references
- drop coroutines and their contents correctly

compilation resume and reload:
- rework the hashmaps into an actual environment data structure that allows for generational indexing?
- differentiate modules and compilation units, or give up on first class modules
- make IDs relative to compilation units
- allow a compilation pass to have some existing compilation units to start off (for partial compilation)
- REPL
    - read
    - evaluate
    - print
    - loop

tooling:
- LSP
    - go-to-definition
        - variable
        - type
        - field access
    - find references
    - hover
    - rename (probably going to be very hard)
    - syntax highlighting
    - autocomplete
- provenance range is incorrect on function declarations
- pretty-printer

unions:
- optional non-exhaustive cases?
- faulthrough / default branch in case statement
- ?. operator on union lvalues
- unions have associated functions (and by extension, destructors)
- unions can be converted to interfaces

error reporting:
- typecheck errors
- error presentation

metaprogramming:
- proc macros? comptime? compile-time reflection (what is that even)? no metaprogramming?
- use whatever mechanism above for ser/des

boolean operators:
- short-circuiting boolean evaluation
- equality / inequality:
    - applicable to nullable values

extern:
- opaque extern pointers
- extern functions are unsafe
- externs can only do C FFI stuff, for ease of wasm backend

returns:
- ensure returns get expected type checked against their function in HIR

strings:
- string manipulation
- interpolation literals
- multiline literals

import support:
- constants may be imported
- import-not-found should error instead of panicking
- alias imports
- allow imports to include a list of things, with an optional catch-all
