borrow checker and lifetimes:
- allow disjoint borrows of struct fields, collection indices
- clone support
- switch from "Move is viral" to "types that have Move must be marked Move"
- must-use-type support
- can't dereference pointers to Move types
- drop:
    - detect drops when a value is conditionally moved
    - validate the drop method has the correct arguments and no return value
    - drop dicts
    - drop strings (may require string buffer vs string view types?)
    - drop generators
    - drop nullables
    - automatically run the drop of all children when dropping
    - drop values when the variable is assigned
    - non-affine types may not define a drop

collections:
- prevent references being stored in collections
- tuples
- arrays:
    - allow empty arrays to typecheck (requires generic type syntax)
- dicts:
    - use a hash table
    - take references as keys, not the direct key type
    - allow empty dicts to type check (requires generic type syntax)
    - should set syntax auto-insert if necessary?
- rc's:
    - can take RC'ed references to collections? maybe even RC'ed subreferences to user-defined collections?
    - can get a ref from within an RC
    - atomic decrement?
- cells:
    - mark as !Sync or equivalent (or maybe just cut and replace with rwlock?)
    - (requires monomorphization) don't take a mutable parameter to get(), return an actual value
- rwlock
- slices
- automatically convert types when assigning collections?

wasm backend:
- compatibility with extern functions (https://github.com/WebAssembly/tool-conventions)
- handle coroutines
- figure out and fix issue with dictionaries
- trailing return statements in functions cause miscompilations

diagnostics:
- parsing recovery during errors
- "unknown type" placeholder for better error reporting

modules:
- modules can be indexed in a type expression context
- modules can be indexed in a struct / variant literal context
- modules can be declared explicitly

misc:
- short-circuiting boolean evaluation
- disallow top-level return
- bigger-than-word types should be returned via allocating on the stack and then writing to them via pointer

errors:
- functions can define `throws`
- throw operator creates and returns an error
- try operator returns an error if one exists
- functions may optionally define a union that they throw, and all `throw`s and `try`s in the function must conform to that union
- allow discriminating on errors with a try/catch type construct or something similar for non-throws functions

interfaces:
- self parameters for interfaces can only be passed by reference (otherwise linear IR doesn't work)
    - when making the method -> function conversion, automatically take a reference if it's required
    - mandate by-reference parameters for interfaces
- unions:
    - unions can be converted to interfaces
    - unions have associated functions
- modules can be converted to interfaces:
    - produce and consume a nullpointer for the vtable call? (might mean we need to generate shim functions)
- interfaces can be converted between each other:
    - in typechecking
    - in the IR
    - in the interpreter
- interface conversion:
    - checks return statements
    - checks implicit returns due to the end of blocks
    - check assignments
- interfaces are supported in the interpreter:
    - mutable interfaces (significant borrowck implications)

interface adapters:
- allow an interface to define an impl for itself on foreign types, limited version of Rust's traits

type parameters:
- non-reified / non-monomorphizing:
    - generic type syntax
    - types can be parameterized
    - nested type parameters are correctly resolved
- monomorphizing
- generic types can be constrained by interfaces

build system:
- cargo-like "build" command that automatically passes source files to the compiler
- packages have a defined compiled format
- packages can depend on other packages

coroutines / generators / async:
- stackless coroutines
    - alloc the generator to match its proper size
- support arguments to coroutines
    - either ban references from coroutine args or note that they're borrowed as long as the generator lives
    - copy arguments into the generator's initial state
- generators on associated functions
- non-infinite generators (e.g. generators should return Next(value) | Exhausted)
- error guardrails:
    - require coroutines to return generators
    - prevent calling coroutine through immutable references

compilation resume and reload:
- rework the hashmaps into an actual environment data structure that allows for generational indexing?
- differentiate modules and compilation units, or give up on first class modules
- make IDs relative to compilation units
- allow a compilation pass to have some existing compilation units to start off (for partial compilation)
- REPL
    - read
    - evaluate
    - print
    - loop

anonymous types:
- anonymous struct
- anonymous union
- anonymous module
- anonymous interface

tooling:
- LSP
    - go-to-definition
        - variable
        - type
        - field access
    - find references
    - hover
    - rename (probably going to be very hard)
    - list of compilation errors
    - syntax highlighting
- pretty-printer

allocator:
- intrinsic bump allocator?

unions:
- optional non-exhaustive cases?
- faulthrough / default branch

error reporting:
- typecheck errors
- error presentation

metaprogramming:
- proc macros? comptime? compile-time reflection (what is that even)? no metaprogramming?
- use whatever mechanism above for ser/des

static data:
- add some syntax for declaring global state
- handle global state in the HIR
- handle global state in the LIR
- handle global state in the interpreter

boolean operators:
- equality / inequality:
    - applicable to nullable values

null:
- ?. operator on union lvalues
- ! operator, which throws if the value is an error (requires errors)
- basic null flow analysis - maybe a special operation to de-null stuff

extern:
- opaque extern pointers
- extern functions are unsafe
- externs can only do C FFI stuff, for ease of wasm backend

unsafe:
- functions can be declared unsafe
- you can have unsafe blocks (or statements?)
- you can only call unsafe functions from within unsafe blocks

units of measure:
- design some system to separate units of measure into various domains (e.g. a "screen pixel" different from a "logical pixel")

language rules:
- don't allow recursive types without indirection

returns:
- ensure returns get expected type checked against their function in HIR

static function vs method:
    - struct associated functions support "self"
        - self can be declared as a typeless parameter syntactically
        - allow calls to associated functions through references (checking correct reference type)
        - self typechecks correctly
        - IR transforms code properly to pass self into the function
    - union associated functions support "self"
    - static associated functions:
        - structs
        - unions
        - interfaces?

strings:
- string manipulation
- interpolation literals
- multiline literals

syntax:
- remove ; and , requirements?
- keyword arguments
- maybe separate syntax for i64 / f64 literals
- there's an ambiguity between dereference / multiplication in if { body } * a += 1;
- decide on whether variables can shadow

import support:
- allow imports to include a list of things, with an optional catch-all
