use std::collections::HashMap;

use crate::{
    id::ID,
    typecheck::{ExpressionType, InterfaceType, StaticDeclaration, StructType},
};

use super::{HirNode, HirNodeValue};

pub fn rewrite(declarations: &HashMap<ID, &StaticDeclaration>, root: &mut HirNode) {
    // We only care about function calls that are an access on the left hand side
    let HirNodeValue::Call(call_lhs, args) = &mut root.value else {
        return;
    };
    let HirNodeValue::Access(lhs, func_name) = &mut call_lhs.value else {
        return;
    };
    let ExpressionType::DeclaredType(ty_id) = &lhs.ty else {
        panic!("lhs of access must be a user-declared type");
    };
    match declarations.get(ty_id) {
        Some(StaticDeclaration::Struct(StructType {
            associated_functions,
            ..
        })) => {
            if let Some(func) = associated_functions.get(func_name) {
                // Replace the existing left hand side with a reference to the called function
                let mut temporary =
                    HirNode::autogenerated(HirNodeValue::VariableReference(func.id()), func.expr());
                std::mem::swap(&mut temporary, call_lhs);
                // Insert the struct as a parameter to the newly called function
                let call_lhs = temporary;
                let HirNodeValue::Access(lhs, _) = call_lhs.value else {
                    unreachable!();
                };
                args.insert(0, *lhs);
            }
        }
        Some(StaticDeclaration::Interface(InterfaceType {
            associated_functions,
            ..
        })) => {
            if let Some(func) = associated_functions.get(func_name) {
                // Insert the interface as a parameter to itself
                args.insert(0, HirNode::clone(lhs));

                let mut temp = HirNode::dummy();
                std::mem::swap(&mut temp, root);
                let HirNode {
                    id,
                    value: HirNodeValue::Call(lhs, args),
                    ty,
                    provenance: _,
                } = temp
                else {
                    unreachable!()
                };
                let HirNodeValue::Access(lhs, _func_name) = lhs.value else {
                    unreachable!()
                };
                temp = HirNode::generated_with_id(
                    id,
                    HirNodeValue::VtableCall(lhs, func.id(), args),
                    ty,
                );
                std::mem::swap(&mut temp, root);
            }
        }
        _ => {}
    }
}
