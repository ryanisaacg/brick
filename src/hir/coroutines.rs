use crate::typecheck::{ExpressionType, PointerKind};

use super::{HirModule, HirNode, HirNodeValue};

// TODO: remove 'CallGenerator' as a concept? rework it?
pub fn take_coroutine_references(module: &mut HirModule) {
    module.visit_mut(|node| {
        let HirNodeValue::CallGenerator(gen, _) = &mut node.value else {
            return;
        };
        if !matches!(&gen.ty, &ExpressionType::Generator { .. }) {
            return;
        }

        let ty = gen.ty.clone();

        let mut temp = HirNode::dummy();
        std::mem::swap(gen.as_mut(), &mut temp);

        temp = HirNode::autogenerated(
            HirNodeValue::TakeUnique(Box::new(temp)),
            ExpressionType::Pointer(PointerKind::Unique, Box::new(ty)),
        );

        std::mem::swap(gen.as_mut(), &mut temp);
    });
}
