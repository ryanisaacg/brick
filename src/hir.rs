use std::collections::HashMap;

use crate::{
    id::ID,
    parser::AstNode,
    provenance::SourceRange,
    typecheck::{
        is_assignable_to, ExpressionType, PrimitiveType, StaticDeclaration, TypecheckedFile,
    },
};

mod auto_deref_dot;
mod auto_numeric_cast;
mod interface_conversion_pass;
mod lower;
mod rewrite_associated_functions;
mod simplify_sequence_expressions;

pub fn lower_module<'ast>(
    module: TypecheckedFile<'ast>,
    declarations: &HashMap<ID, &'ast StaticDeclaration>,
) -> HirModule {
    let mut module = lower::lower_module(module, declarations);

    module.visit_mut(|expr: &mut _| rewrite_associated_functions::rewrite(declarations, expr));
    interface_conversion_pass::rewrite(&mut module, declarations);
    auto_deref_dot::auto_deref_dot(&mut module);
    auto_numeric_cast::auto_numeric_cast(&mut module, declarations);
    simplify_sequence_expressions::simplify_sequence_assignments(&mut module);
    simplify_sequence_expressions::simplify_sequence_uses(&mut module, declarations);

    // TODO: control flow graph for top-level statements

    module
}

// TODO: should the IR be a stack machine?

pub struct HirModule {
    pub top_level_statements: Vec<HirNode>,
    // TODO: include imports, structs, and extern function declaration
    pub functions: Vec<HirFunction>,
}

impl HirModule {
    pub fn visit_mut(&mut self, mut callback: impl FnMut(&mut HirNode)) {
        for expr in self.top_level_statements.iter_mut() {
            expr.visit_mut_recursive(&mut callback);
        }
        for func in self.functions.iter_mut() {
            func.body.visit_mut_recursive(&mut callback);
        }
    }

    pub fn visit(&self, mut callback: impl FnMut(Option<&HirNode>, &HirNode)) {
        for expr in self.top_level_statements.iter() {
            expr.visit_recursive(None, &mut callback);
        }
        for func in self.functions.iter() {
            func.body.visit_recursive(None, &mut callback);
        }
    }
}

#[derive(Clone, Debug)]
pub struct HirFunction {
    pub id: ID,
    pub name: String,
    pub body: HirNode,
}

#[derive(Clone, Debug, PartialEq)]
pub struct HirNode {
    pub id: ID,
    pub value: HirNodeValue,
    pub ty: ExpressionType,
    pub provenance: Option<SourceRange>,
}

impl HirNode {
    pub fn dummy() -> HirNode {
        HirNode {
            id: ID::dummy(),
            value: HirNodeValue::Null,
            ty: ExpressionType::Null,
            provenance: None,
        }
    }

    pub fn autogenerated(value: HirNodeValue, ty: ExpressionType) -> HirNode {
        HirNode {
            id: ID::new(),
            value,
            ty,
            provenance: None,
        }
    }

    pub fn generated_with_id(id: ID, value: HirNodeValue, ty: ExpressionType) -> HirNode {
        HirNode {
            id,
            value,
            ty,
            provenance: None,
        }
    }

    pub fn from_ast(ast: &AstNode<'_>, value: HirNodeValue, ty: ExpressionType) -> HirNode {
        HirNode {
            id: ast.id,
            value,
            ty,
            provenance: Some(ast.provenance.clone()),
        }
    }

    pub fn from_ast_void(ast: &AstNode<'_>, value: HirNodeValue) -> HirNode {
        Self::from_ast(ast, value, ExpressionType::Void)
    }

    pub fn visit_mut(&mut self, mut callback: impl FnMut(&mut HirNode)) {
        self.visit_mut_recursive(&mut callback);
    }

    fn visit_mut_recursive(&mut self, callback: &mut impl FnMut(&mut HirNode)) {
        self.children_mut(|child| {
            child.visit_mut_recursive(callback);
        });
        callback(self);
    }

    pub fn children_mut<'a>(&'a mut self, mut callback: impl FnMut(&'a mut HirNode)) {
        self.children_recursive_mut(&mut callback);
    }

    fn children_recursive_mut<'a>(&'a mut self, callback: &mut impl FnMut(&'a mut HirNode)) {
        match &mut self.value {
            HirNodeValue::Parameter(_, _)
            | HirNodeValue::VariableReference(_)
            | HirNodeValue::Declaration(_)
            | HirNodeValue::Int(_)
            | HirNodeValue::Float(_)
            | HirNodeValue::Bool(_)
            | HirNodeValue::CharLiteral(_)
            | HirNodeValue::StringLiteral(_)
            | HirNodeValue::Null => {}
            HirNodeValue::Call(lhs, params) | HirNodeValue::VtableCall(lhs, _, params) => {
                callback(lhs);
                for param in params.iter_mut() {
                    callback(param);
                }
            }
            HirNodeValue::Access(child, _)
            | HirNodeValue::InterfaceAddress(child)
            | HirNodeValue::TakeUnique(child)
            | HirNodeValue::TakeShared(child)
            | HirNodeValue::Dereference(child)
            | HirNodeValue::ArrayLiteralLength(child, _)
            | HirNodeValue::Return(child)
            | HirNodeValue::NumericCast { value: child, .. }
            | HirNodeValue::StructToInterface { value: child, .. } => {
                callback(child);
            }
            HirNodeValue::Assignment(lhs, rhs)
            | HirNodeValue::ArrayIndex(lhs, rhs)
            | HirNodeValue::While(lhs, rhs)
            | HirNodeValue::BinOp(_, lhs, rhs) => {
                callback(lhs);
                callback(rhs);
            }
            HirNodeValue::Sequence(children) | HirNodeValue::ArrayLiteral(children) => {
                for child in children.iter_mut() {
                    callback(child);
                }
            }
            HirNodeValue::If(cond, if_branch, else_branch) => {
                callback(cond);
                callback(if_branch);
                if let Some(else_branch) = else_branch {
                    callback(else_branch);
                }
            }
            HirNodeValue::StructLiteral(_, fields) => {
                for field in fields.values_mut() {
                    callback(field);
                }
            }
        }
    }

    pub fn visit(&self, mut callback: impl FnMut(Option<&HirNode>, &HirNode)) {
        self.visit_recursive(None, &mut callback);
    }

    fn visit_recursive(
        &self,
        parent: Option<&HirNode>,
        callback: &mut impl FnMut(Option<&HirNode>, &HirNode),
    ) {
        callback(parent, self);
        self.children(|child| {
            child.visit_recursive(Some(self), callback);
        });
    }

    pub fn children<'a>(&'a self, mut callback: impl FnMut(&'a HirNode)) {
        self.children_recursive(&mut callback);
    }

    fn children_recursive<'a>(&'a self, callback: &mut impl FnMut(&'a HirNode)) {
        match &self.value {
            HirNodeValue::Parameter(_, _)
            | HirNodeValue::VariableReference(_)
            | HirNodeValue::Declaration(_)
            | HirNodeValue::Int(_)
            | HirNodeValue::Float(_)
            | HirNodeValue::Bool(_)
            | HirNodeValue::CharLiteral(_)
            | HirNodeValue::StringLiteral(_)
            | HirNodeValue::Null => {}
            HirNodeValue::Call(lhs, params) | HirNodeValue::VtableCall(lhs, _, params) => {
                callback(lhs);
                for param in params.iter() {
                    callback(param);
                }
            }
            HirNodeValue::Access(child, _)
            | HirNodeValue::InterfaceAddress(child)
            | HirNodeValue::TakeUnique(child)
            | HirNodeValue::TakeShared(child)
            | HirNodeValue::Dereference(child)
            | HirNodeValue::ArrayLiteralLength(child, _)
            | HirNodeValue::Return(child)
            | HirNodeValue::NumericCast { value: child, .. }
            | HirNodeValue::StructToInterface { value: child, .. } => {
                callback(child);
            }
            HirNodeValue::Assignment(lhs, rhs)
            | HirNodeValue::ArrayIndex(lhs, rhs)
            | HirNodeValue::While(lhs, rhs)
            | HirNodeValue::BinOp(_, lhs, rhs) => {
                callback(lhs);
                callback(rhs);
            }
            HirNodeValue::Sequence(children) | HirNodeValue::ArrayLiteral(children) => {
                for child in children.iter() {
                    callback(child);
                }
            }
            HirNodeValue::If(cond, if_branch, else_branch) => {
                callback(cond);
                callback(if_branch);
                if let Some(else_branch) = else_branch {
                    callback(else_branch);
                }
            }
            HirNodeValue::StructLiteral(_, fields) => {
                for field in fields.values() {
                    callback(field);
                }
            }
        }
    }

    // TODO: could use a better name
    pub fn walk_expected_types_for_children(
        &self,
        declarations: &HashMap<ID, &StaticDeclaration>,
        mut callback: impl FnMut(&ExpressionType, &HirNode),
    ) {
        let callback = &mut callback;
        match &self.value {
            HirNodeValue::Int(_)
            | HirNodeValue::Float(_)
            | HirNodeValue::Bool(_)
            | HirNodeValue::Null
            | HirNodeValue::Parameter(_, _)
            | HirNodeValue::VariableReference(_)
            | HirNodeValue::Access(_, _)
            | HirNodeValue::CharLiteral(_)
            | HirNodeValue::StringLiteral(_)
            | HirNodeValue::TakeUnique(_)
            | HirNodeValue::TakeShared(_)
            | HirNodeValue::Dereference(_)
            | HirNodeValue::InterfaceAddress(_)
            | HirNodeValue::NumericCast { .. }
            | HirNodeValue::StructToInterface { .. }
            | HirNodeValue::Declaration(_) => {}
            HirNodeValue::ArrayIndex(_, idx) => {
                callback(&ExpressionType::Primitive(PrimitiveType::PointerSize), idx);
            }
            HirNodeValue::BinOp(_, lhs, rhs) => {
                if is_assignable_to(declarations, &lhs.ty, &rhs.ty) {
                    callback(&lhs.ty, rhs);
                } else {
                    callback(&rhs.ty, lhs);
                }
            }
            HirNodeValue::VtableCall(_, fn_id, params) => {
                let Some(StaticDeclaration::Func(func)) = declarations.get(fn_id) else {
                    unreachable!();
                };
                for (i, ty) in func.params.iter().enumerate() {
                    callback(ty, &params[i]);
                }
            }
            HirNodeValue::Call(lhs, params) => {
                let ExpressionType::DeclaredType(id) = &lhs.ty else {
                    unreachable!()
                };
                let Some(StaticDeclaration::Func(func)) = declarations.get(id) else {
                    unreachable!()
                };
                for (i, ty) in func.params.iter().enumerate() {
                    callback(ty, &params[i]);
                }
            }
            HirNodeValue::Assignment(lhs, rhs) => {
                callback(&lhs.ty, rhs);
            }
            HirNodeValue::Return(_) => {
                // TODO: check return types
            }
            HirNodeValue::If(_, _, _) | HirNodeValue::While(_, _) | HirNodeValue::Sequence(_) => {
                // TODO: check return types
            }
            HirNodeValue::StructLiteral(ty_id, fields) => {
                let Some(StaticDeclaration::Struct(ty)) = declarations.get(ty_id) else {
                    unreachable!();
                };
                for (name, field) in fields.iter() {
                    callback(&ty.fields[name], field);
                }
            }
            // TODO: heterogenous collections
            HirNodeValue::ArrayLiteral(_) => {}
            HirNodeValue::ArrayLiteralLength(_, len) => {
                callback(&ExpressionType::Primitive(PrimitiveType::PointerSize), len);
            }
        }
    }

    pub fn walk_expected_types_for_children_mut(
        &mut self,
        declarations: &HashMap<ID, &StaticDeclaration>,
        mut callback: impl FnMut(&ExpressionType, &mut HirNode),
    ) {
        let callback = &mut callback;
        match &mut self.value {
            HirNodeValue::Int(_)
            | HirNodeValue::Float(_)
            | HirNodeValue::Bool(_)
            | HirNodeValue::Null
            | HirNodeValue::Parameter(_, _)
            | HirNodeValue::VariableReference(_)
            | HirNodeValue::Access(_, _)
            | HirNodeValue::CharLiteral(_)
            | HirNodeValue::StringLiteral(_)
            | HirNodeValue::TakeUnique(_)
            | HirNodeValue::TakeShared(_)
            | HirNodeValue::Dereference(_)
            | HirNodeValue::InterfaceAddress(_)
            | HirNodeValue::NumericCast { .. }
            | HirNodeValue::StructToInterface { .. }
            | HirNodeValue::Declaration(_) => {}
            HirNodeValue::ArrayIndex(_, idx) => {
                callback(&ExpressionType::Primitive(PrimitiveType::PointerSize), idx);
            }
            HirNodeValue::BinOp(_, lhs, rhs) => {
                if is_assignable_to(declarations, &lhs.ty, &rhs.ty) {
                    callback(&lhs.ty, rhs);
                } else {
                    callback(&rhs.ty, lhs);
                }
            }
            HirNodeValue::VtableCall(_, fn_id, params) => {
                let Some(StaticDeclaration::Func(func)) = declarations.get(fn_id) else {
                    unreachable!();
                };
                for (i, ty) in func.params.iter().enumerate() {
                    callback(ty, &mut params[i]);
                }
            }
            HirNodeValue::Call(lhs, params) => {
                let ExpressionType::DeclaredType(id) = &lhs.ty else {
                    unreachable!()
                };
                let Some(StaticDeclaration::Func(func)) = declarations.get(id) else {
                    unreachable!()
                };
                for (i, ty) in func.params.iter().enumerate() {
                    callback(ty, &mut params[i]);
                }
            }
            HirNodeValue::Assignment(lhs, rhs) => {
                callback(&lhs.ty, rhs);
            }
            HirNodeValue::Return(_) => {
                // TODO: check return types
            }
            HirNodeValue::If(_, _, _) | HirNodeValue::While(_, _) | HirNodeValue::Sequence(_) => {
                // TODO: check return types
            }
            HirNodeValue::StructLiteral(ty_id, fields) => {
                let Some(StaticDeclaration::Struct(ty)) = declarations.get(ty_id) else {
                    unreachable!();
                };
                for (name, field) in fields.iter_mut() {
                    callback(&ty.fields[name], field);
                }
            }
            // TODO: heterogenous collections
            HirNodeValue::ArrayLiteral(_) => {}
            HirNodeValue::ArrayLiteralLength(_, len) => {
                callback(&ExpressionType::Primitive(PrimitiveType::PointerSize), len);
            }
        }
    }
}

// TODO: should struct fields also be referred to via opaque IDs?

#[derive(Clone, Debug, PartialEq)]
pub enum HirNodeValue {
    /// Give the Nth parameter the given ID
    Parameter(usize, ID),
    VariableReference(ID),
    Declaration(ID),

    Call(Box<HirNode>, Vec<HirNode>),
    Access(Box<HirNode>, String),
    Assignment(Box<HirNode>, Box<HirNode>),
    ArrayIndex(Box<HirNode>, Box<HirNode>),
    BinOp(HirBinOp, Box<HirNode>, Box<HirNode>),

    Return(Box<HirNode>),

    Int(i64),
    Float(f64),
    Bool(bool),
    Null,
    CharLiteral(char),
    StringLiteral(String),
    NumericCast {
        value: Box<HirNode>,
        from: PrimitiveType,
        to: PrimitiveType,
    },

    TakeUnique(Box<HirNode>),
    TakeShared(Box<HirNode>),
    Dereference(Box<HirNode>),

    /// Like a Block in that it's a collection of nodes, but the IR
    /// doesn't care about scoping or expressions
    Sequence(Vec<HirNode>),

    // Expressions
    If(Box<HirNode>, Box<HirNode>, Option<Box<HirNode>>),
    While(Box<HirNode>, Box<HirNode>),
    StructLiteral(ID, HashMap<String, HirNode>),
    ArrayLiteral(Vec<HirNode>),
    ArrayLiteralLength(Box<HirNode>, Box<HirNode>),

    // Instructions only generated by IR passes
    VtableCall(Box<HirNode>, ID, Vec<HirNode>),
    InterfaceAddress(Box<HirNode>),
    StructToInterface {
        value: Box<HirNode>,
        vtable: HashMap<ID, ID>,
    },
}

#[derive(Copy, Clone, Debug, PartialEq, Eq)]
pub enum HirBinOp {
    Add,
    Subtract,
    Multiply,
    Divide,
    LessThan,
    GreaterThan,
    LessEqualThan,
    GreaterEqualThan,
    EqualTo,
    NotEquals,
}
