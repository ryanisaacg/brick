word ::= /[A-Za-z_][A-Za-z_0-9]/
integer ::= /[0-9_]/
float ::= integer | integer "." integer

statement ::= import | declaration | assignment | function | expression | expression ";"
import ::= "import" word
declaration ::= "let" word "=" expression ";"
assignment ::= word "=" expression ";"

function ::= maybe_extern function_header type_annotation block
external_function_declaration ::= "extern" function_header ";"
function_header ::= "fn" word "(" function_args ")"
maybe_extern ::= Îµ | "extern"

struct ::= "struct" word "{" function_args "}"

function_args ::= word type_annotation |
    word type_annotation "," |
    word type_annotation "," function_args

type_annotation ::= ":" type
type ::= word | "unique" type | "shared" type | "[" type "]"

expression ::= if_expr | while_expr | block | operator | call | "(" expression ")" | array_literal | struct_literal
operator ::= assignment | reference | numeric | boolean | dot
assignment ::= expression "=" expression
reference ::= "shared" expression | "unique" expression
compare ::= expression ">" expression | expression "<" expression
numeric ::= expression "+" expression | expression "-" expression | expression "*" expression | expression "/" expression
dot ::= expression "." word
call ::=  expression "(" call_param ")" | expression "(" call_param ")" |
    expression "[" expression "]" | expression "[" expression "]" 
    call_param ::= expression |
        expression "," |
        expression "," call_param
array_literal ::= "[" expression ";" integer "]" | "[" array_literal_items "]"
    array_literal_items = expression | expression "," | expression "," array_literal_items
struct_literal ::= atom | word "{" struct_literal_params "}"
    struct_literal_params ::= word | word "," |
        word "," struct_literal_params |
        word ":" expression | word ":" expression "," |
        word ":" expression "," struct_literal_params
atom ::= word | integer | "-"integer | float | "-"float

if_expr ::= "if" expression block
while_expr ::= "while" expression block
block ::= "{" block_contents "}"
    block_contents ::= statement | statement block_contents
