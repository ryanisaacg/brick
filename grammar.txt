word ::= /[A-Za-z_][A-Za-z_0-9]/
integer ::= /[0-9_]/
float ::= integer | integer "." integer

block ::= "{" block_contents "}"
block_contents = statement | statement block_contents

statement ::= import | declaration | assignment | function | expression | expression ";"
import ::= "import" word
declaration ::= "let" word "=" expression ";"
assignment ::= word "=" expression ";"
function ::= "fn" word "(" function_args ")" type_annotation block
function_args ::= word type_annotation |
    word type_annotation "," |
    word type_annotation "," function_args
struct ::= "struct" word "{" function_args "}"

type_annotation ::= ":" type
type ::= word | "unique" type | "shared" type

expression ::= if_expr | while_expr | block_expr | assignment_expr
assignment_expr ::= reference_expr | reference_expr "=" reference_expr
reference_expr ::= call_expr | "shared" reference_expr | "unique" reference_expr
call_expr ::= compare_expr | compare_expr "(" call_param_expr ")" | compare_expr "(" call_param_expr ")" call_expr
call_param_expr ::= expression | expression "," | expression "," call_param_expr
compare_expr ::= sum_expr | sum_expr ">" compare_expr | sum_expr "<" compare_expr
sum_expr ::= paren_expr | paren_expr "+" sum_expr | paren_expr "-" sum_expr
paren_expr ::= atom | "(" expression ")"
atom ::= word | integer | "-"integer | float | "-"float

if_expr ::= "if" expression block_expr
while_expr ::= "while" expression block_expr
block_expr ::= "{" block_contents "}"
block_contents ::= statement | statement block_contents
